---
settings:
  chains:
    relay_chain: &relay_chain
      wsPort: 9900
    assets_parachain: &assets_parachain
      wsPort: 9910
      paraId: &ap_id 1000
    penpal_parachain_a: &penpal_parachain_a
      wsPort: 9920
      paraId: &pp_a_id 2000
    penpal_parachain_b: &penpal_parachain_b
      wsPort: 9930
      paraId: &pp_b_id 2001
  variables:
    common:
      weight_threshold:  &weight_threshold { refTime: [30, 30], proofSize: [30, 30] }
      amount_threshold:  &amount_threshold { amount: [0, 10] }
    chains:
      relay_chain:
        signer: &rc_signer //Alice
        wallet: &rc_wallet HNZata7iMYWmk5RvZRTiAsSDhV8366zq2YGb3tLH5Upf74F
        parachains:
          assets:
            destination: &ap_dest { v3: { parents: 0, interior: { x1: { parachain: *ap_id }}}}
            account: &ap_acc '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d'
            beneficiary: &ap_benf { v3: { parents: 0, interior: { x1: { accountId32: { id: *ap_acc }}}}}
          penpal_a:
            destination: &pp_a_dest { v3: { parents: 0, interior: { x1: { parachain: *pp_a_id }}}}
            account: &pp_a_acc '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d'
            beneficiary: &pp_a_benf { v3: { parents: 0, interior: { x1: { accountId32: { id: *pp_a_acc }}}}}
            sovereign_account: &pp_a_sov_acc F7fq1jMZkfuCuoMTyiEVAP2DMpMt18WopgBqTJznLihLNbZ
          penpal_b:
            amount_to_fund: &amount_to_fund 100000000000000
        ksm: &rc_ksm { concrete: { parents: 0, interior: { here: true }}}
        amount: &amount 1000000000000
        ksm_fungible: &rc_ksm_fungible { id: *rc_ksm, fun: { fungible: *amount }}
        require_weight_at_most: &rc_weight_at_most { refTime: 1000000000, proofSize: 200000 }
      assets_parachain:
        wallet: &ap_wallet HNZata7iMYWmk5RvZRTiAsSDhV8366zq2YGb3tLH5Upf74F
        asset_id: &asset_id 1
        asset_min_balance: &asset_ed 1000
      penpal_parachain_a:
        signer: &pp_a_signer //Alice
        wallet: &pp_a_wallet 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY
        penpal_b:
          destination: &pp_b_dest { v3: { parents: 1, interior: { x1: { parachain: *pp_b_id }}}}
          account: &pp_b_acc '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d'
          beneficiary: &pp_b_benf { v3: { parents: 0, interior: { x1: { accountId32: { id: *pp_b_acc }}}}}
          sovereign_account: &pp_b_sov_acc F7fq1jMmNj5j2jAHcBxgM26JzUn2N4duXu1U4UZNdkfZEPV
      penpal_parachain_b:
        wallet: &pp_b_wallet 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY
        ksm: &pp_b_ksm { concrete: { parents: 1, interior: { here: true }}}
        amount: &amount_pp_b 100000000000
        ksm_fungible: &pp_b_ksm_fungible { id: *pp_b_ksm, fun: { fungible: *amount_pp_b }}
  decodedCalls:
    force_create_asset:
      chain: *assets_parachain
      pallet: assets
      call: forceCreate
      args: [
        *asset_id,
        { Id: *ap_wallet }, # owner
        true, # isSufficient
        *asset_ed # minBalance
      ]

tests:
  - name: DMP
    its: []
    describes:
      - name: xcmPallet.limitedTeleportAssets
        before: &before_get_balances
          - name: Get the balances of the Relay Chain's sender & Assets Parachain's receiver & Penpal Parachain's receiver
            actions:
              - queries:
                  balance_rc_sender_before:
                    chain: *relay_chain
                    pallet: system
                    call: account
                    args: [ *rc_wallet ]
                  balance_ap_receiver_before:
                    chain: *assets_parachain
                    pallet: system
                    call: account
                    args: [ *ap_wallet ]
                  balance_pp_receiver_before:
                    chain: *penpal_parachain_a
                    pallet: system
                    call: account
                    args: [ *pp_a_wallet ]
        its:
          - name: Should teleport native assets from the Relay Chain to the Assets Parachain
            actions:
              - extrinsics:
                - chain: *relay_chain
                  signer: *rc_signer
                  pallet: xcmPallet
                  call: limitedTeleportAssets
                  args: [
                    *ap_dest, # destination
                    *ap_benf, # beneficiary
                    { v3: [ *rc_ksm_fungible ] },
                    0, # feeAssetItem
                    { unlimited: true } # weightLimit
                  ]
                  events:
                    - name: xcmPallet.Attempted
                      threshold: *weight_threshold
                      result: { outcome: { Complete: { refTime: '631,531,000', proofSize: '7,186' }} }
                    - name: dmpQueue.ExecutedDownward
                      chain: *assets_parachain
                      threshold: *weight_threshold
                      result: {
                        outcome: { Complete: { refTime: '166,944,000', proofSize: '3,593' }}
                      }
              - queries:
                  balance_rc_sender_after:
                    chain: *relay_chain
                    pallet: system
                    call: account
                    args: [ *rc_wallet ]
                  balance_ap_receiver_after:
                    chain: *assets_parachain
                    pallet: system
                    call: account
                    args: [ *ap_wallet ]

          - name: Should reduce the balance of the sender
            actions:
              - asserts:
                  balanceDecreased:
                    args: [
                      {
                        balances: {
                          before: $balance_rc_sender_before,
                          after: $balance_rc_sender_after,
                        },
                        amount: *amount
                      }
                    ]

          - name: Should increase the balance of the receiver
            actions:
              - asserts:
                  balanceIncreased:
                    args: [
                      {
                        balances: {
                          before: $balance_ap_receiver_before,
                          after: $balance_ap_receiver_after,
                        }
                      }
                    ]

      - name: xcmPallet.send | Superuser - Transact(assets.forceCreate)
        its:
          - name: Relay Chain Superuser account SHOULD be able to execute a XCM Transact instruction in the Assets Parachain
            actions:
              - extrinsics:
                - chain: *relay_chain
                  signer: *rc_signer
                  sudo: true
                  pallet: xcmPallet
                  call: send
                  args: [
                    *ap_dest, # destination
                    {
                      v3: [ #message
                        {
                          UnpaidExecution: {
                            weightLimit: Unlimited
                          }
                        },
                        {
                          Transact: {
                            originKind: Superuser,
                            requireWeightAtMost: *rc_weight_at_most,
                            call: $force_create_asset
                          }
                        }
                      ]
                    }
                  ]
                  events:
                    - name: xcmPallet.Sent
                    - name: dmpQueue.ExecutedDownward
                      chain: *assets_parachain
                      threshold: *weight_threshold
                      result: {
                        outcome: { Complete: { refTime: '1,014,103,000', proofSize: '200,000' }}
                      }
              - queries:
                  forced_created_asset:
                    chain: *assets_parachain
                    pallet: assets
                    call: asset
                    args: [ *asset_id ]
              - asserts:
                  isSome:
                    args: [ $forced_created_asset ]

      - name: xcmPallet.send | Native - Transact(assets.forceCreate)
        its:
          - name: Relay Chain Native account SHOULD NOT be able to execute a XCM Transact instruction in the Assets Parachain
            actions:
              - extrinsics:
                - chain: *relay_chain
                  signer: *rc_signer
                  pallet: xcmPallet
                  call: send
                  args: [
                    *ap_dest, # destination
                    {
                      v3: [ #message
                        {
                          UnpaidExecution: {
                            weightLimit: Unlimited
                          }
                        },
                        {
                          Transact: {
                            originKind: Native,
                            requireWeightAtMost: *rc_weight_at_most,
                            call: $force_create_asset
                          }
                        }
                      ]
                    }
                  ]
                  events:
                    - name: system.ExtrinsicFailed
                      result: { dispatchError: BadOrigin }

      - name: xcmPallet.limitedReserveTransferAssets | Relay Chain -> Assets Parachain
        before: *before_get_balances
        its:
          - name: SHOULD NOT reserved transfer native assets from the Relay Chain to the Assets Parachain
            actions:
              - extrinsics:
                - chain: *relay_chain
                  signer: *rc_signer
                  pallet: xcmPallet
                  call: limitedReserveTransferAssets
                  args: [
                    *ap_dest, # destination
                    *ap_benf, # beneficiary
                    { v3: [ *rc_ksm_fungible ] }, # assets
                    0, # feeAssetItem
                    { unlimited: true } # weightLimit
                  ]
                  events:
                    - name: xcmPallet.Attempted
                      threshold: *weight_threshold
                      result: { outcome: { Complete: { refTime: '630,092,000', proofSize: '6,196' }} }
                    - name: dmpQueue.ExecutedDownward
                      chain: *assets_parachain
                      threshold: *weight_threshold
                      result: {
                        outcome: {
                            Incomplete: [
                              { refTime: '33,015,000', proofSize: '1,489' },
                              UntrustedReserveLocation
                            ]
                          }
                      }
              - queries:
                  balance_rc_sender_after:
                    chain: *relay_chain
                    pallet: system
                    call: account
                    args: [ *rc_wallet ]
                  balance_ap_receiver_after:
                    chain: *assets_parachain
                    pallet: system
                    call: account
                    args: [ *ap_wallet ]

          - name: Should reduce the balance of the sender
            actions:
              - asserts:
                  balanceDecreased:
                    args: [
                      {
                        balances: {
                          before: $balance_rc_sender_before,
                          after: $balance_rc_sender_after,
                        },
                        amount: *amount
                      }
                    ]

          - name: Should keep the balance of the receiver
            actions:
              - asserts:
                  equal:
                    args:
                      [
                        $balance_ap_receiver_before,
                        $balance_ap_receiver_after
                      ]

      - name: xcmPallet.limitedReserveTransferAssets | Relay Chain -> Penpal Parachain
        before: *before_get_balances
        its:
          - name: SHOULD reserved transfer native assets from the Relay Chain to Penpal Parachain
            actions:
              - extrinsics:
                - chain: *relay_chain
                  signer: *rc_signer
                  pallet: xcmPallet
                  call: limitedReserveTransferAssets
                  args: [
                    *pp_a_dest, # destination
                    *pp_a_benf, # beneficiary
                    { v3: [ *rc_ksm_fungible ] }, # assets
                    0, # feeAssetItem
                    { unlimited: true } # weightLimit
                  ]
                  events:
                    - name: xcmPallet.Attempted
                      threshold: *weight_threshold
                      result: { outcome: { Complete: { refTime: '630,092,000', proofSize: '6,196' }} }
                    - name: balances.Transfer
                      result: {
                        from: *rc_wallet,
                        to: *pp_a_sov_acc,
                        amount: *amount
                      }
                    - name: messageQueue.Processed
                      chain: *penpal_parachain_a
                      threshold: *weight_threshold
                      result: {
                          origin: Parent,
                          weightUsed: {
                            refTime: '5,000,000,000',
                            proofSize: '327,680'
                          },
                          success: true
                      }
                    - name: balances.Deposit
                      chain: *penpal_parachain_a
                      threshold: *amount_threshold # amount - fees
                      result: {
                        who: *pp_a_wallet,
                        amount: *amount
                      }
              - queries:
                  balance_rc_sender_after:
                    chain: *relay_chain
                    pallet: system
                    call: account
                    args: [ *rc_wallet ]
                  balance_pp_receiver_after:
                    chain: *penpal_parachain_a
                    pallet: system
                    call: account
                    args: [ *pp_a_wallet ]

          - name: Should reduce the balance of the sender
            actions:
              - asserts:
                  balanceDecreased:
                    args: [
                      {
                        balances: {
                          before: $balance_rc_sender_before,
                          after: $balance_rc_sender_after,
                        },
                        amount: *amount
                      }
                    ]

          - name: Should increase the balance of the receiver
            actions:
              - asserts:
                  balanceIncreased:
                    args: [
                      {
                        balances: {
                          before: $balance_pp_receiver_before,
                          after: $balance_pp_receiver_after,
                        }
                      }
                    ]

      - name: xcmPallet.limitedReserveTransferAssets | Penpal A -> Relay Chain -> Penpal B
        before: &before_penpal_a_to_penpal_b
          - name: Get the balances of the Penpal A's sender & Penpal B's receiver
            actions:
              - queries:
                  balance_pp_a_sender_before:
                    chain: *penpal_parachain_a
                    pallet: system
                    call: account
                    args: [ *pp_a_wallet ]
                  balance_pp_b_receiver_before:
                    chain: *penpal_parachain_b
                    pallet: system
                    call: account
                    args: [ *pp_b_wallet ]
          - name: Penpal B's Sovereign account should have balance to reserve transfer to Penpal A
            actions:
              - extrinsics:
                  - chain: *relay_chain
                    signer: *rc_signer
                    pallet: balances
                    call: transferAllowDeath
                    args: [
                      *pp_a_sov_acc, # destination
                      *amount_to_fund, # value
                    ]
                    events:
                      - name: balances.Transfer
        its:
          - name: SHOULD reserved transfer native assets from the Penpal A to Penpal B through the Relay Chain
            actions:
              - extrinsics:
                - chain: *penpal_parachain_a
                  signer: *pp_a_signer
                  pallet: polkadotXcm
                  call: limitedReserveTransferAssets
                  args: [
                    *pp_b_dest, # destination
                    *pp_b_benf, # beneficiary
                    { v3: [ *pp_b_ksm_fungible ] }, # assets
                    0, # feeAssetItem
                    { unlimited: true } # weightLimit
                  ]
                  events:
                    - name: polkadotXcm.Attempted
                      threshold: *weight_threshold
                      result: { outcome: { Complete: { used: { refTime: '2,000,000,000', proofSize: '131,072' }} }}
                    - name: balances.Withdraw
                      result: {
                        who: *pp_b_wallet,
                        amount: *amount_pp_b
                      }
                    - name: parachainSystem.UpwardMessageSent
                    - name: messageQueue.Processed
                      chain: *relay_chain
                      threshold: *weight_threshold
                      result: {
                          origin: { Ump: { Para: *pp_a_id }},
                          weightUsed: {
                            refTime: '628,825,000',
                            proofSize: '7,186'
                          },
                          success: true
                      }
                    - name: balances.Withdraw
                      chain: *relay_chain
                      result: {
                        who: *pp_a_sov_acc,
                        amount: *amount_pp_b
                      }
                    - name: balances.Deposit
                      chain: *relay_chain
                      threshold: *amount_threshold # amount - fees
                      result: {
                        who: *pp_b_sov_acc,
                        amount: *amount_pp_b
                      }
                    - name: messageQueue.Processed
                      chain: *penpal_parachain_b
                      threshold: *weight_threshold
                      result: {
                          origin: Parent,
                          weightUsed: {
                            refTime: '5,000,000,000',
                            proofSize: '327,680'
                          },
                          success: true
                      }
                    - name: balances.Deposit
                      chain: *penpal_parachain_b
                      threshold: *amount_threshold # amount - fees
                      result: {
                        who: *pp_b_wallet,
                        amount: *amount_pp_b
                      }
              - queries:
                  balance_pp_a_sender_after:
                    chain: *penpal_parachain_a
                    pallet: system
                    call: account
                    args: [ *pp_a_wallet ]
                  balance_pp_b_receiver_after:
                    chain: *penpal_parachain_b
                    pallet: system
                    call: account
                    args: [ *pp_b_wallet ]

          - name: Should reduce the balance of the sender
            actions:
              - asserts:
                  balanceDecreased:
                    args: [
                      {
                        balances: {
                          before: $balance_pp_a_sender_before,
                          after: $balance_pp_a_sender_after,
                        },
                        amount: *amount_pp_b
                      }
                    ]

          - name: Should increase the balance of the receiver
            actions:
              - asserts:
                  balanceIncreased:
                    args: [
                      {
                        balances: {
                          before: $balance_pp_b_receiver_before,
                          after: $balance_pp_b_receiver_after,
                        }
                      }
                    ]

      - name: xcmPallet.limitedReserveTransferAssets | Penpal A -> Asset Hub -> Penpal B
        before: *&before_penpal_a_to_penpal_b
        its:
          - name: SHOULD reserved transfer native assets from the Penpal A to Penpal B through the Assset Hub
            actions:
              - extrinsics:
                - chain: *penpal_parachain_a
                  signer: *pp_a_signer
                  pallet: polkadotXcm
                  call: limitedReserveTransferAssets
                  args: [
                    *pp_b_dest, # destination
                    *pp_b_benf, # beneficiary
                    { v3: [ *pp_b_ksm_fungible ] }, # assets
                    0, # feeAssetItem
                    { unlimited: true } # weightLimit
                  ]
                  events:
                    - name: polkadotXcm.Attempted
                      threshold: *weight_threshold
                      result: { outcome: { Complete: { used: { refTime: '2,000,000,000', proofSize: '131,072' }} }}
                    - name: balances.Withdraw
                      result: {
                        who: *pp_b_wallet,
                        amount: *amount_pp_b
                      }
                    - name: parachainSystem.UpwardMessageSent
                    - name: messageQueue.Processed
                      chain: *relay_chain
                      threshold: *weight_threshold
                      result: {
                          origin: { Ump: { Para: *pp_a_id }},
                          weightUsed: {
                            refTime: '628,825,000',
                            proofSize: '7,186'
                          },
                          success: true
                      }
                    - name: balances.Withdraw
                      chain: *relay_chain
                      result: {
                        who: *pp_a_sov_acc,
                        amount: *amount_pp_b
                      }
                    - name: balances.Deposit
                      chain: *relay_chain
                      threshold: *amount_threshold # amount - fees
                      result: {
                        who: *pp_b_sov_acc,
                        amount: *amount_pp_b
                      }
                    - name: messageQueue.Processed
                      chain: *penpal_parachain_b
                      threshold: *weight_threshold
                      result: {
                          origin: Parent,
                          weightUsed: {
                            refTime: '5,000,000,000',
                            proofSize: '327,680'
                          },
                          success: true
                      }
                    - name: balances.Deposit
                      chain: *penpal_parachain_b
                      threshold: *amount_threshold # amount - fees
                      result: {
                        who: *pp_b_wallet,
                        amount: *amount_pp_b
                      }
              - queries:
                  balance_pp_a_sender_after:
                    chain: *penpal_parachain_a
                    pallet: system
                    call: account
                    args: [ *pp_a_wallet ]
                  balance_pp_b_receiver_after:
                    chain: *penpal_parachain_b
                    pallet: system
                    call: account
                    args: [ *pp_b_wallet ]

          - name: Should reduce the balance of the sender
            actions:
              - asserts:
                  balanceDecreased:
                    args: [
                      {
                        balances: {
                          before: $balance_pp_a_sender_before,
                          after: $balance_pp_a_sender_after,
                        },
                        amount: *amount_pp_b
                      }
                    ]

          - name: Should increase the balance of the receiver
            actions:
              - asserts:
                  balanceIncreased:
                    args: [
                      {
                        balances: {
                          before: $balance_pp_b_receiver_before,
                          after: $balance_pp_b_receiver_after,
                        }
                      }
                    ]
