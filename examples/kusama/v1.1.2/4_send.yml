---
settings:
  chains:
    relay_chain: &relay_chain
      wsPort: 8000
    assets_parachain: &assets_parachain
      wsPort: 8001
      paraId: &ap_id 1000
    penpal_parachain: &penpal_parachain
      wsPort: 8003
      paraId: &pp_id 2000
  variables:
    common:
    chains:
      relay_chain:
        signer: &rc_signer //Alice
        assets_parachain_destination: &rc_ap_dest { v3: { parents: 0, interior: { x1: { parachain: *ap_id }}}}
        amount_to_fund: &amount_to_fund 100000000000000
        require_weight_at_most: &rc_weight_at_most { refTime: 10000000000, proofSize: 20000 }
      assets_parachain:
        signer: &ap_signer //Alice
        wallet: &ap_wallet HNZata7iMYWmk5RvZRTiAsSDhV8366zq2YGb3tLH5Upf74F
        asset_id: &asset_id 5
        assets_parachain_destination: &pp_ap_dest { v3: { parents: 1, interior: { x1: { parachain: *ap_id }}}}
        reservable_asset_id: &reservable_asset_id 1
        amount: &amount 10000000000000
        reservable_asset: &reservable_asset {
          concrete: {
            parents: 0,
            interior: {
              X2: [
                {PalletInstance: 50},
                {GeneralIndex: *reservable_asset_id}
              ]
            }
          }
        }
        reservable_fungible: &reservable_asset_fungible { id: *reservable_asset, fun: { fungible: *amount }}
        foreign_asset: &ap_foreign_asset {
          parents: 1,
          interior: {
            X3: [
              {Parachain: *pp_id},
              {PalletInstance: 50},
              {GeneralIndex: 5}
            ]
          }
        }
        ksm: &ap_ksm { concrete: { parents: 1, interior: { here: true }}}
        amount_to_send: &amount_to_send 1000000000000
        ksm_fungible: &ap_ksm_fungible { id: *ap_ksm, fun: { fungible: *amount_to_send }}

      penpal_parachain:
        sovereign_account: &pp_sovereign_sibl FBeL7EAeUroLWXW1yfKboiqTqVfbRBcsUKd6QqVf4kGBySS
        signer: &pp_signer //Alice
        penpal_parachain_account: &pp_acc '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d'
  decodedCalls:
    create_foreign_asset:
      chain: *assets_parachain
      pallet: foreignAssets
      call: create
      args: [
        *ap_foreign_asset,
        { Id: *ap_wallet }, # admin
        1000000000, # minBalance
      ]
    create_asset:
      chain: *assets_parachain
      pallet: assets
      call: create
      args: [
        *asset_id,
        { Id: *pp_sovereign_sibl }, # owner
        1000000000 # minBalance
      ]

tests:
  - name: Send
    its: []
    describes:
      - name: Relay Chain -> AssetHub
        its:
          - name: Relay Chain Native account SHOULD NOT be able to execute a XCM Transact instruction in the Assets Parachain
            actions:
              - extrinsics:
                - chain: *relay_chain
                  signer: *rc_signer
                  pallet: xcmPallet
                  call: send
                  args: [
                    *rc_ap_dest, # destination
                    {
                      v3: [ #message
                        {
                          UnpaidExecution: {
                            weightLimit: Unlimited
                          }
                        },
                        {
                          Transact: {
                            originKind: Native,
                            requireWeightAtMost: *rc_weight_at_most,
                            call: $create_foreign_asset
                          }
                        }
                      ]
                    }
                  ]
                  events:
                    - name: system.ExtrinsicFailed
                      result: { dispatchError: BadOrigin }

      - name: Parachain -> AssetHub
        before:
          - name: DEPENDENCY | Penpal's Sovereing account in AssetHub should have some balance
            actions:
              - extrinsics:
                  - chain: *assets_parachain
                    signer: *ap_signer
                    pallet: balances
                    call: transferAllowDeath
                    args: [
                      *pp_sovereign_sibl, # destination
                      *amount_to_fund, # value
                    ]
                    events:
                      - name: balances.Transfer
          - name: DEPENDENCY | Penpal's Sovereing account in AssetHub should have some sufficient assets
            actions:
              - extrinsics:
                  - chain: *assets_parachain
                    signer: *ap_signer
                    pallet: assets
                    call: mint
                    args: [
                      *reservable_asset_id,
                      *pp_sovereign_sibl,
                      *amount_to_fund
                    ]
                    events:
                      - name: assets.Issued
                        result: { assetId: *reservable_asset_id, owner: *pp_sovereign_sibl, amount: *amount_to_fund }
        its:
          - name: Penpal should be able to create a Foreign Asset in AssetHub paying fees with System Asset
            actions:
              - extrinsics:
                - chain: *penpal_parachain
                  signer: *pp_signer
                  sudo: true
                  pallet: polkadotXcm
                  call: send
                  args: [
                    *pp_ap_dest, # destination
                    {
                      v3: [ #message
                        {
                          WithdrawAsset: [
                            *ap_ksm_fungible
                          ]
                        },
                        {
                          BuyExecution: {
                            fees: *ap_ksm_fungible,
                            weightLimit: Unlimited
                          }
                        },
                        {
                          Transact: {
                            originKind: Xcm,
                            requireWeightAtMost: *rc_weight_at_most,
                            call: $create_foreign_asset
                          }
                        },
                        {
                          RefundSurplus
                        },
                        {
                          DepositAsset: {
                            assets: { Wild: All },
                            beneficiary: {
                              parents: 0,
                              interior: {
                                X1: {
                                  AccountId32: {
                                      network: , # None
                                      id: *pp_acc
                                    }
                                }
                              }}
                          }
                        }
                      ]
                    }
                  ]
                  events:
                    - name: polkadotXcm.Sent
                    - name: foreignAssets.Created
                      chain: *assets_parachain

          - name: Penpal should be able to create an Asset in AssetHub paying fees with sufficient Assets
            actions:
              - extrinsics:
                - chain: *penpal_parachain
                  signer: *pp_signer
                  sudo: true
                  pallet: polkadotXcm
                  call: send
                  args: [
                    *pp_ap_dest, # destination
                    {
                      v3: [ #message
                        {
                          WithdrawAsset: [
                            *reservable_asset_fungible
                          ]
                        },
                        {
                          BuyExecution: {
                            fees: *reservable_asset_fungible,
                            weightLimit: Unlimited
                          }
                        },
                        {
                          Transact: {
                            originKind: SovereignAccount,
                            requireWeightAtMost: *rc_weight_at_most,
                            call: $create_asset
                          }
                        },
                        {
                          RefundSurplus
                        },
                        {
                          DepositAsset: {
                            assets: { Wild: All },
                            beneficiary: {
                              parents: 0,
                              interior: {
                                X1: {
                                  AccountId32: {
                                      network: , # None
                                      id: *pp_acc
                                    }
                                }
                              }}
                          }
                        }
                      ]
                    }
                  ]
                  events:
                    - name: polkadotXcm.Sent
                    - name: assets.Created
                      chain: *assets_parachain
