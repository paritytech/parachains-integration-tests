---
settings:
  chains:
    relay_chain: &relay_chain
      wsPort: 8000
    assets_parachain: &assets_parachain
      wsPort: 8001
      paraId: &ap_id 1000
    collectives_parachain: &collectives_parachain
      wsPort: 8002
      paraId: &cp_id 1001
    penpal_parachain: &penpal_parachain
      wsPort: 8003
      paraId: &pp_id 2000
    penpal_parachain_b: &penpal_parachain_b
      wsPort: 8004
      paraId: &pp_id_b 2001
  variables:
    common:
      xcm_version: &xcm_version 3
      require_weight_at_most: &weight_at_most {refTime: 1000000000, proofSize: 200000}
      weight_threshold:  &weight_threshold { refTime: [30, 30], proofSize: [30, 30] }
    chains:
      relay_chain:
        signer: &rc_signer //Alice
        assets_parachain_destination: &ap_dest { v3: { 0, interior: { x1: { parachain: *ap_id }}}}
        collectives_parachain_destination: &cp_dest { v3: { 0, interior: { x1: { parachain: *cp_id }}}}
        require_weight_at_most: &rc_weight_at_most { refTime: 1000000000, proofSize: 200000 }
      penpal_parachain:
        signer: &pp_signer //Alice
        asset_owner: &pp_asset_owner 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY
        system_asset: &pp_system_asset { parents: 1, interior: Here }
        reservable_asset_id: &pp_reservable_asset_id 1
        teleportable_asset_id: &pp_teleportable_asset_id 2
        reservable_asset: &pp_reservable_asset {
          parents: 1,
          interior: {
            X3: [
              {Parachain: *ap_id},
              {PalletInstance: 50},
              {GeneralIndex: *pp_reservable_asset_id}
            ]
          }
        }
      assets_parachain:
        teleportable_asset: &ap_teleportable_asset {
          parents: 1,
          interior: {
            X3: [
              {Parachain: *pp_id},
              {PalletInstance: 50},
              {GeneralIndex: *pp_teleportable_asset_id}
            ]
          }
        }
        asset_owner: &ap_asset_owner 15oF4uVJwmo4TdGW7VfQxNLavjCXviqxT9S1MgbjMNHr6Sp5
        penpal_sovereign_account: &ap_penpal_sovereign_acc 13cKp89Msu7M2PiaCuuGr1BzAsD5V3vaVbDMs3YtjMZHdGwR
  decodedCalls:
    ap_force_xcm_version_relay:
      chain: *assets_parachain
      pallet: polkadotXcm
      call: forceXcmVersion
      args: [
        { # location
          parents: 1,
          interior: Here
        },
        *xcm_version # xcmVersion
      ]
    cp_force_xcm_version_relay:
      chain: *collectives_parachain
      pallet: polkadotXcm
      call: forceXcmVersion
      args: [
        { # location
          parents: 1,
          interior: Here
        },
        *xcm_version # xcmVersion
      ]
    ap_force_xcm_version_pp:
      chain: *assets_parachain
      pallet: polkadotXcm
      call: forceXcmVersion
      args: [
        { # location
          parents: 1,
          interior: { X1: { Parachain: *pp_id }}
        },
        *xcm_version # xcmVersion
      ]
    force_create_teleportable_asset:
      chain: *assets_parachain
      pallet: foreignAssets
      call: forceCreate
      args: [
        *ap_teleportable_asset,
        { Id: *ap_penpal_sovereign_acc }, # owner
        true, # isSufficient
        1000000000 # minBalance
      ]
    force_create_reservable_asset:
      chain: *assets_parachain
      pallet: assets
      call: forceCreate
      args: [
        *pp_reservable_asset_id,
        { Id: *ap_asset_owner }, # owner
        true, # isSufficient
        1000000000 # minBalance
      ]

tests:
  - name: Initialize Chains
    its:
      - name: XCM supported versions between chains
        actions:
          - extrinsics: # Relay Chain sets supported version for Asset Parachain
            - chain: *relay_chain
              sudo: true
              signer: *rc_signer
              pallet: xcmPallet
              call: forceXcmVersion
              args: [
                { # location
                  parents: 0,
                  interior: {
                    X1: [
                      {Parachain: *ap_id}
                    ]
                  }
                },
                *xcm_version # xcmVersion
              ]
              events:
                - name: xcmPallet.SupportedVersionChanged
                  result: { location: { parents: 0, interior: { X1: [{ Parachain: *ap_id }]}}, version: *xcm_version }
          - extrinsics: # Relay Chain sets supported version for Collectives Parachain
            - chain: *relay_chain
              sudo: true
              signer: *rc_signer
              pallet: xcmPallet
              call: forceXcmVersion
              args: [
                { # location
                  parents: 0,
                  interior: {
                    X1: [
                      {Parachain: *cp_id}
                    ]
                  }
                },
                *xcm_version # xcmVersion
              ]
              events:
                - name: xcmPallet.SupportedVersionChanged
                  result: { location: { parents: 0, interior: { X1: [{ Parachain: *cp_id }]}}, version: *xcm_version }
          - extrinsics: # Relay Chain sets supported version for Penpal Parachain
            - chain: *relay_chain
              sudo: true
              signer: *rc_signer
              pallet: xcmPallet
              call: forceXcmVersion
              args: [
                { # location
                  parents: 0,
                  interior: {
                    X1: [
                      {Parachain: *pp_id}
                    ]
                  }
                },
                *xcm_version # xcmVersion
              ]
              events:
                - name: xcmPallet.SupportedVersionChanged
                  result: { location: { parents: 0, interior: { X1: [{ Parachain: *pp_id }]}}, version: *xcm_version }
          - extrinsics: # Asset Parachain sets supported version for Relay Chain through it
            - chain: *relay_chain
              signer: *rc_signer
              sudo: true
              pallet: xcmPallet
              call: send
              args: [
                *ap_dest, # destination
                {
                  v3: [ #message
                    {
                      UnpaidExecution: {
                          weightLimit: {
                            limited: {
                              refTime: 2200000000,
                              proofSize: 200000
                            }
                        }
                      }
                    },
                    {
                      Transact: {
                        originKind: Superuser,
                        requireWeightAtMost: *weight_at_most,
                        call: $ap_force_xcm_version_relay
                      }
                    }
                  ]
                }
              ]
              events:
                - name: xcmPallet.Sent
                - name: dmpQueue.ExecutedDownward
                  chain: *assets_parachain
                  threshold: *weight_threshold
                  result: {
                    outcome: { Complete: { refTime: '1,019,210,000', proofSize: '200,000' }}
                  }
                - name: polkadotXcm.SupportedVersionChanged
                  chain: *assets_parachain
                  result: { location: { parents: 1, interior: Here }, version: *xcm_version }
          - extrinsics: # Collectives Parachain sets supported version for Relay Chain through it
            - chain: *relay_chain
              signer: *rc_signer
              sudo: true
              pallet: xcmPallet
              call: send
              args: [
                *cp_dest, # destination
                {
                  v3: [ #message
                    {
                      UnpaidExecution: {
                        weightLimit: Unlimited,
                      }
                    },
                    {
                      Transact: {
                        originKind: Superuser,
                        requireWeightAtMost: *weight_at_most,
                        call: $cp_force_xcm_version_relay
                      }
                    }
                  ]
                }
              ]
              events:
                - name: xcmPallet.Sent
                - name: dmpQueue.ExecutedDownward
                  chain: *collectives_parachain
                  result: {
                    outcome: { Complete: { }}
                  }
                - name: polkadotXcm.SupportedVersionChanged
                  chain: *collectives_parachain
                  result: { location: { parents: 1, interior: Here }, version: *xcm_version }
          - extrinsics: # Asset Parachain sets supported version for Penpal through Relay Chain
            - chain: *relay_chain
              signer: *rc_signer
              sudo: true
              pallet: xcmPallet
              call: send
              args: [
                *ap_dest, # destination
                {
                  v3: [ #message
                    {
                      UnpaidExecution: {
                          weightLimit: {
                            limited: {
                              refTime: 2200000000,
                              proofSize: 200000
                            }
                        }
                      }
                    },
                    {
                      Transact: {
                        originKind: Superuser,
                        requireWeightAtMost: *weight_at_most,
                        call: $ap_force_xcm_version_pp
                      }
                    }
                  ]
                }
              ]
              events:
                - name: xcmPallet.Sent
                - name: dmpQueue.ExecutedDownward
                  chain: *assets_parachain
                  threshold: *weight_threshold
                  result: {
                    outcome: { Complete: { refTime: '1,019,210,000', proofSize: '200,000' }}
                  }
                - name: polkadotXcm.SupportedVersionChanged
                  chain: *assets_parachain
                  result: { location: { parents: 1, interior: { X1: { Parachain: *pp_id }} }, version: *xcm_version }
          - extrinsics: # Penpal Parachain sets supported version for Relay Chain
            - chain: *penpal_parachain
              signer: *pp_signer
              sudo: true
              pallet: polkadotXcm
              call: forceXcmVersion
              args: [
                { # location
                  parents: 1,
                  interior: Here
                },
                *xcm_version # xcmVersion
              ]
              events:
                - name: polkadotXcm.SupportedVersionChanged
                  result: { location: { parents: 1, interior: Here }, version: *xcm_version }
          - extrinsics: # Penpal Parachain sets supported version for Asset Parachain
            - chain: *penpal_parachain
              signer: *pp_signer
              sudo: true
              pallet: polkadotXcm
              call: forceXcmVersion
              args: [
                { # location
                  parents: 1,
                  interior: { X1: [{ Parachain: *ap_id }]}
                },
                *xcm_version # xcmVersion
              ]
              events:
                - name: polkadotXcm.SupportedVersionChanged
                  result: { location: { parents: 1, interior: { X1: [{ Parachain: *ap_id }]} }, version: *xcm_version }

  - name: Penpal assets creation
    its:
      - name: Create local Teleportable Asset
        actions:
          - extrinsics:
            - chain: *penpal_parachain
              signer: *pp_signer
              sudo: true
              pallet: assets
              call: forceCreate
              args: [
                *pp_teleportable_asset_id, # assetId
                { # owner
                  Id: *pp_asset_owner
                },
                false, # sufficient
                1000000000 # minimumBalance
              ]
              events:
                - name: assets.ForceCreated
                  result: {
                    assetId: *pp_teleportable_asset_id,
                    owner: *pp_asset_owner,
                  }
      - name: Create foreign System Asset representation
        actions:
          - extrinsics:
            - chain: *penpal_parachain
              signer: *pp_signer
              sudo: true
              pallet: foreignAssets
              call: forceCreate
              args: [
                *pp_system_asset, # location
                { # owner
                  Id: *pp_asset_owner
                },
                true, # sufficient
                1000000000 # minimumBalance
              ]
              events:
                - name: foreignAssets.ForceCreated
                  result: {
                    assetId: *pp_system_asset,
                    owner: *pp_asset_owner,
                  }
      - name: Create foreign AssetHub rerervable asset representation
        actions:
          - extrinsics:
            - chain: *penpal_parachain
              signer: *pp_signer
              sudo: true
              pallet: foreignAssets
              call: forceCreate
              args: [
                *pp_reservable_asset, # location
                { # owner
                  Id: *pp_asset_owner
                },
                true, # sufficient
                1000000000 # minimumBalance
              ]
              events:
                - name: foreignAssets.ForceCreated
                  result: {
                    assetId: *pp_reservable_asset,
                    owner: *pp_asset_owner,
                  }

  - name: Penpal B assets creation
    its:
      - name: Create foreign System Asset representation
        actions:
          - extrinsics:
            - chain: *penpal_parachain_b
              signer: *pp_signer
              sudo: true
              pallet: foreignAssets
              call: forceCreate
              args: [
                *pp_system_asset, # location
                { # owner
                  Id: *pp_asset_owner
                },
                true, # sufficient
                1000000000 # minimumBalance
              ]
              events:
                - name: foreignAssets.ForceCreated
                  result: {
                    assetId: *pp_system_asset,
                    owner: *pp_asset_owner,
                  }

  - name: AssetHub assets creation
    its:
      - name: Create Teleportable Penpal Asset representation and Reservable Asset
        actions:
          - extrinsics:
            - chain: *relay_chain
              signer: *rc_signer
              sudo: true
              pallet: xcmPallet
              call: send
              args: [
                *ap_dest, # destination
                {
                  v3: [ #message
                    {
                      UnpaidExecution: {
                        weightLimit: Unlimited
                      }
                    },
                    {
                      Transact: {
                        originKind: Superuser,
                        requireWeightAtMost: *rc_weight_at_most,
                        call: $force_create_teleportable_asset
                      }
                    },
                    {
                      Transact: {
                        originKind: Superuser,
                        requireWeightAtMost: *rc_weight_at_most,
                        call: $force_create_reservable_asset
                      }
                    }
                  ]
                }
              ]
              events:
                - name: xcmPallet.Sent
                - name: dmpQueue.ExecutedDownward
                  chain: *assets_parachain
                  threshold: *weight_threshold
                  result: {
                    outcome: { Complete: { refTime: '2,030,446,000', proofSize: '400,000' }}
                  }
          - queries:
              forced_created_reservable_asset:
                chain: *assets_parachain
                pallet: assets
                call: asset
                args: [ *pp_reservable_asset_id ]
              forced_created_teleportable_asset:
                chain: *assets_parachain
                pallet: foreignAssets
                call: asset
                args: [ *ap_teleportable_asset ]
          - asserts:
              isSome:
                args: [ $forced_created_reservable_asset ]
          - asserts:
              isSome:
                args: [ $forced_created_teleportable_asset ]

      # - name: Create AssetHub rerervable asset representation
      #   actions:
      #     - extrinsics:
      #       - chain: *penpal_parachain
      #         signer: *pp_signer
      #         sudo: true
      #         pallet: foreignAssets
      #         call: forceCreate
      #         args: [
      #           *pp_reservable_asset, # location
      #           { # owner
      #             Id: *pp_asset_owner
      #           },
      #           true, # sufficient
      #           1000000000 # minimumBalance
      #         ]
      #         events:
      #           - name: foreignAssets.ForceCreated
      #             result: {
      #               assetId: *pp_reservable_asset,
      #               owner: *pp_asset_owner,
      #             }
