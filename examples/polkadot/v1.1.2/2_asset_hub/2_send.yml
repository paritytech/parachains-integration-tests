---
settings:
  chains:
    relay_chain: &relay_chain
      wsPort: 8000
    assets_parachain: &assets_parachain
      wsPort: 8001
      paraId: &ap_id 1000
    penpal_parachain: &penpal_parachain
      wsPort: 8003
      paraId: &pp_id 2000
  variables:
    common:
      require_weight_at_most: &weight_at_most {refTime: 1200000000, proofSize: 20000}
      weight_threshold:  &weight_threshold { refTime: [30, 30], proofSize: [30, 30] }
    chains:
      relay_chain:
        signer: &rc_signer //Alice
        wallet: &rc_wallet HNZata7iMYWmk5RvZRTiAsSDhV8366zq2YGb3tLH5Upf74F
        assets_parachain_destination: &rc_ap_dest { v3: { parents: 0, interior: { x1: { parachain: *ap_id }}}}
        assets_parachain_account: &ap_acc '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d'
        assets_parachain_beneficiary: &ap_benf { v3: { parents: 0, interior: { x1: { accountId32: { id: *ap_acc }}}}}
        dot: &rc_dot { concrete: { parents: 0, interior: { here: true }}}
        amount_to_fund: &amount_to_fund 100000000000000
        # amount_to_semd: &amount 1000000000
        # dot_fungible: &rc_dot_fungible { id: *rc_dot, fun: { fungible: *amount_to_send }}
        require_weight_at_most: &rc_weight_at_most { refTime: 10000000000, proofSize: 20000 }
        assets_parachain_dest_routed: &ap_dest_routed { v3: { parents: 1, interior: { x1: { parachain: *ap_id } }}}
      assets_parachain:
        signer: &ap_signer //Alice
        wallet: &ap_wallet HNZata7iMYWmk5RvZRTiAsSDhV8366zq2YGb3tLH5Upf74F
        asset_id: &asset_id 5
        assets_parachain_destination: &pp_ap_dest { v3: { parents: 1, interior: { x1: { parachain: *ap_id }}}}
        asset_min_balance: &asset_ed 1000
        assets_pallet_id: &assets_pallet_id 50
        reservable_asset_id: &reservable_asset_id 1
        amount: &amount 10000000000000
        # reservable_asset_location: &reservable_asset_location {
        #   parents: 1,
        #   interior: {
        #     X3: [
        #       {Parachain: *ap_id},
        #       {PalletInstance: 50},
        #       {GeneralIndex: *pp_reservable_asset_id}
        #     ]
        #   }
        # }
        reservable_asset: &reservable_asset {
          concrete: {
            parents: 0,
            interior: {
              X2: [
                # {Parachain: *ap_id},
                {PalletInstance: 50},
                {GeneralIndex: *reservable_asset_id}
              ]
            }
          }
        }
        reservable_asset_bis: &reservable_asset_bis {
          concrete: {
            parents: 1,
            interior: {
              X2: {
                # {Parachain: *ap_id},
                PalletInstance: 50,
                GeneralIndex: *reservable_asset_id
              }
            }
          }
        }
        reservable_fungible: &reservable_asset_fungible { id: *reservable_asset, fun: { fungible: *amount }}
        suff_asset: &suff_asset { concrete: { parents: 0, interior: { x2: [ { PalletInstance: *assets_pallet_id }, { GeneralIndex: *asset_id } ] }}}
        suff_asset_fail: &suff_asset_fail { concrete: { parents: 0, interior: { x2: [ { PalletInstance: *assets_pallet_id }, { GeneralIndex: 3 } ] }}}
        suff_asset_fungible_fail: &ap_suff_asset_fungible_fail { id: *suff_asset_fail, fun: { fungible: 200000000000 }}
        foreign_asset: &ap_foreign_asset {
          parents: 1,
          interior: {
            X3: [
              {Parachain: *pp_id},
              {PalletInstance: 50},
              {GeneralIndex: 5}
            ]
          }
        }
        dot: &ap_dot { concrete: { parents: 1, interior: { here: true }}}
        # amount: &amount 1000000000000
        amount_to_send: &amount_to_send 1000000000000
        dot_fungible: &ap_dot_fungible { id: *ap_dot, fun: { fungible: *amount_to_send }}

      penpal_parachain:
        sovereign_account: &pp_sovereign_sibl 13cKp89Msu7M2PiaCuuGr1BzAsD5V3vaVbDMs3YtjMZHdGwR
        signer: &pp_signer //Alice
        penpal_parachain_account: &pp_acc '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d'
  decodedCalls:
    create_foreign_asset:
      chain: *assets_parachain
      pallet: foreignAssets
      call: create
      args: [
        *ap_foreign_asset,
        { Id: *ap_wallet }, # admin
        1000000000, # minBalance
      ]
    create_asset:
      chain: *assets_parachain
      pallet: assets
      call: create
      args: [
        *asset_id,
        { Id: *pp_sovereign_sibl }, # owner
        # true, # isSufficient
        1000000000 # minBalance
      ]


tests:
  - name: Send
    its: []
    describes:
      - name: Relay Chain -> AssetHub
        its:
          - name: Relay Chain Native account SHOULD NOT be able to execute a XCM Transact instruction in the Assets Parachain
            actions:
              - extrinsics:
                - chain: *relay_chain
                  signer: *rc_signer
                  pallet: xcmPallet
                  call: send
                  args: [
                    *rc_ap_dest, # destination
                    {
                      v3: [ #message
                        {
                          UnpaidExecution: {
                            weightLimit: Unlimited
                          }
                        },
                        {
                          Transact: {
                            originKind: Native,
                            requireWeightAtMost: *rc_weight_at_most,
                            call: $create_foreign_asset
                          }
                        }
                      ]
                    }
                  ]
                  events:
                    - name: system.ExtrinsicFailed
                      result: { dispatchError: BadOrigin }

      - name: Parachain -> AssetHub
        before:
          - name: DEPENDENCY | Penpal's Sovereing account in AssetHub should have some balance
            actions:
              - extrinsics:
                  - chain: *assets_parachain
                    signer: *ap_signer
                    pallet: balances
                    call: transferAllowDeath
                    args: [
                      *pp_sovereign_sibl, # destination
                      *amount_to_fund, # value
                    ]
                    events:
                      - name: balances.Transfer
          - name: DEPENDENCY | Penpal's Sovereing account in AssetHub should have some sufficient assets
            actions:
              - extrinsics:
                  - chain: *assets_parachain
                    signer: *ap_signer
                    pallet: assets
                    call: mint
                    args: [
                      *reservable_asset_id,
                      *pp_sovereign_sibl,
                      *amount_to_fund
                    ]
                    events:
                      - name: assets.Issued
                        result: { assetId: *reservable_asset_id, owner: *pp_sovereign_sibl, amount: *amount_to_fund }
        its:
          - name: Penpal should be able to create a Foreign Asset in AssetHub paying fees with System Asset
            actions:
              - extrinsics:
                - chain: *penpal_parachain
                  signer: *pp_signer
                  sudo: true
                  pallet: polkadotXcm
                  call: send
                  args: [
                    *pp_ap_dest, # destination
                    {
                      v3: [ #message
                        {
                          WithdrawAsset: [
                            *ap_dot_fungible
                          ]
                        },
                        {
                          BuyExecution: {
                            fees: *ap_dot_fungible,
                            weightLimit: Unlimited
                          }
                        },
                        {
                          Transact: {
                            originKind: Xcm,
                            requireWeightAtMost: *rc_weight_at_most,
                            call: $create_foreign_asset
                          }
                        },
                        {
                          RefundSurplus
                        },
                        {
                          DepositAsset: {
                            assets: { Wild: All },
                            beneficiary: {
                              parents: 0,
                              interior: {
                                X1: {
                                  AccountId32: {
                                      network: , # None
                                      id: *pp_acc
                                    }
                                }
                              }}
                          }
                        }
                      ]
                    }
                  ]
                  events:
                    - name: polkadotXcm.Sent
                    - name: foreignAssets.Created
                      chain: *assets_parachain

          - name: Penpal should be able to create an Asset in AssetHub paying fees with sufficient Assets
            actions:
              - extrinsics:
                - chain: *penpal_parachain
                  signer: *pp_signer
                  sudo: true
                  pallet: polkadotXcm
                  call: send
                  args: [
                    *pp_ap_dest, # destination
                    {
                      v3: [ #message
                        {
                          WithdrawAsset: [
                            *reservable_asset_fungible
                          ]
                        },
                        {
                          BuyExecution: {
                            fees: *reservable_asset_fungible,
                            weightLimit: Unlimited
                          }
                        },
                        {
                          Transact: {
                            originKind: SovereignAccount,
                            requireWeightAtMost: *rc_weight_at_most,
                            call: $create_asset
                          }
                        },
                        {
                          RefundSurplus
                        },
                        {
                          DepositAsset: {
                            assets: { Wild: All },
                            beneficiary: {
                              parents: 0,
                              interior: {
                                X1: {
                                  AccountId32: {
                                      network: , # None
                                      id: *pp_acc
                                    }
                                }
                              }}
                          }
                        }
                      ]
                    }
                  ]
                  events:
                    - name: polkadotXcm.Sent
                    - name: assets.Created
                      chain: *assets_parachain
                    # TODO: I am getting an `xcmpQueue.OverweightEnqueued` instead
              #       - name: dmpQueue.ExecutedDownward
              #         chain: *assets_parachain
              #         threshold: *weight_threshold
              #         result: {
              #           outcome: { Complete: { refTime: '1,014,103,000', proofSize: '200,000' }}
              #         }
              # - queries:
              #     forced_created_asset:
              #       chain: *assets_parachain
              #       pallet: foreignAssets
              #       call: asset
              #       args: [ *ap_foreign_asset ]
              # - asserts:
              #     isSome:
              #       args: [ $forced_created_asset ]
