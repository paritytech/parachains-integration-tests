---
settings:
  chains:
    relay_chain: &relay_chain
      wsPort: 9900
    assets_parachain: &assets_parachain
      wsPort: 9910
      paraId: &ap_id 1000
      sovereign_account: &ap_sovereign F7fq1jSNVTPfJmaHaXCMtatT1EZefCUsa7rRiQVNR5efcah
    community_parachain_2000: &community_parachain_2000
      wsPort: 9920
      paraId: &cp_2000_id 2000
      sovereign_account: &cp_2000_sovereign F7fq1jMZkfuCuoMTyiEVAP2DMpMt18WopgBqTJznLihLNbZ
  variables:
    common:
      amount: &amount 1000000000000
      require_weight_at_most: &weight_at_most 1000000000
      hrmp_channels:
        proposed_max_capacity: &max_capacity 8
        proposed_max_message_size: &max_message_size 8192
    chains:
      relay_chain:
        signer: &rc_signer //Alice
        wallet: &rc_wallet HNZata7iMYWmk5RvZRTiAsSDhV8366zq2YGb3tLH5Upf74F
        assets_parachain_destination: &ap_dest { v1: { 0, interior: { x1: { parachain: *ap_id }}}}
        assets_parachain_account: &ap_acc '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d'
        assets_parachain_beneficiary: &ap_benf {v1: { parents: 0, interior: { x1: { accountId32: { network: { any: true }, id: *ap_acc }}}}}
        ksm: &rc_ksm { concrete: { 0, interior: { here: true }}}
        ksm_fungible: &rc_ksm_fungible { id: *rc_ksm, fun: { fungible: *amount }}     
      assets_parachain_account:
        signer: &ap_signer //Alice
        wallet: &ap_wallet HNZata7iMYWmk5RvZRTiAsSDhV8366zq2YGb3tLH5Upf74F
        asset_id: &asset_id 1
        asset_min_balance: &asset_ed 1000 
        relay_chain_destination: &rc_dest { v1: { parents: 1, interior: { here: true }}}
        assets_parachain_account: &rc_acc '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d'
        relay_chain_beneficiary: &rc_benf {v1: { parents: 0, interior: { x1: { accountId32: { network: { any: true }, id: *rc_acc }}}}}
        ksm: &ap_ksm { concrete: { parents: 1, interior: { here: true }}}
        ksm_fungible: &ap_ksm_fungible { id: *ap_ksm, fun: { fungible: *amount }}
      community_parachain_2000:
        signer: &cp_2000_signer //Alice
  decodedCalls:
    init_open_channel_with_ap:
      chain: *relay_chain
      pallet: hrmp
      call: hrmpInitOpenChannel
      args: [ 
        *ap_id, # recipient
        *max_capacity, # proposedMaxCapacity
        *max_message_size # proposedMaxMessageSize
      ]
    accept_init_open_request_from_cp_2000:
      chain: *relay_chain
      pallet: hrmp
      call: hrmpAcceptOpenChannel
      args: [ 
        *cp_2000_id, # sender
      ]
    xcm_accept_init_open_request_from_cp_2000:  
      chain: *assets_parachain
      pallet: polkadotXcm
      call: send
      args: [ 
        *rc_dest, # destination 
        { 
          v2: [ #message
            { 
              WithdrawAsset: [*rc_ksm_fungible]
            },
            {
              BuyExecution: {
                  fees: *rc_ksm_fungible,
                  weightLimit: Unlimited
              }
            },
            {
              Transact: {
                originType: Native, 
                requireWeightAtMost: *weight_at_most, 
                call: $accept_init_open_request_from_cp_2000
              }
            }
          ] 
        }
      ]  


tests:
  - name: HRMP
    before:
      - name: DEPENDANCY | Community Parachain Sovereign account in the Relay Chain needs to be funded
        actions:
          - extrinsics:
            - chain: *relay_chain
              signer: *rc_signer
              pallet: balances
              call: transfer
              args: [ 
                *cp_2000_sovereign, # destination 
                *amount, # value
              ]
              events:
                - name: balances.Transfer
      - name: DEPENDANCY | Assets Parachain Sovereign account in the Relay Chain needs to be funded
        actions:
          - extrinsics:
            - chain: *relay_chain
              signer: *rc_signer
              pallet: balances
              call: transfer
              args: [ 
                *ap_sovereign, # destination 
                *amount, # value
              ]
              events:
                - name: balances.Transfer             
    describes:
      - name: initOpenChannel (Community Parachain → Assets Parachain)
        its:
          - name: Community Parachain sends a request to the Relay Chain to open a channel with the Assets Parchain
            actions:
              - extrinsics:
                - chain: *community_parachain_2000
                  signer: *cp_2000_signer
                  sudo: true
                  pallet: polkadotXcm
                  call: send
                  args: [ 
                    *rc_dest, # destination 
                    { 
                      v2: [ #message
                        { 
                          WithdrawAsset: [*rc_ksm_fungible]
                        },
                        {
                          BuyExecution: {
                              fees: *rc_ksm_fungible,
                              weightLimit: Unlimited
                          }
                        },
                        {
                          Transact: {
                            originType: Native, 
                            requireWeightAtMost: *weight_at_most, 
                            call: $init_open_channel_with_ap
                          }
                        }
                      ] 
                    }
                  ]  
                  events:
                    - name: sudo.Sudid
                      attribute:
                        type: Result<Null, SpRuntimeDispatchError>
                        value: Ok
                    - name: polkadotXcm.Sent
                    - name: ump.ExecutedUpward
                      chain: *relay_chain
                      type: XcmV2TraitsOutcome
                      isComplete: true
                      value: 1,000,000,000
                    - name: hrmp.OpenChannelRequested
                      chain: *relay_chain
              - queries:
                  requested_channels:
                    chain: *relay_chain
                    pallet: hrmp
                    call: hrmpOpenChannelRequestsList
                    args: []
              - asserts:
                  equal:
                    args: [
                      $requested_channels,
                      [
                        {
                          sender: *cp_2000_id,
                          recipient: *ap_id
                        }
                      ]
                    ]

      - name: acceptOpenChannel (Assets Parachain → Community Parachain) 
        its:              
          - name: Assets Parachain accepts Community Parachain request of openning a HRMP channel
            actions:
              - extrinsics:
                - chain: *relay_chain
                  signer: *rc_signer
                  sudo: true
                  pallet: xcmPallet
                  call: send
                  args: [ 
                    *ap_dest, # destination 
                    { 
                      v2: [ #message
                        { 
                          Transact: { 
                            originType: Superuser, 
                            requireWeightAtMost: *weight_at_most, 
                            call: $xcm_accept_init_open_request_from_cp_2000
                          }  
                        }
                      ] 
                    }
                  ]  
                  events:
                    - name: sudo.Sudid
                      attribute:
                        type: Result<Null, SpRuntimeDispatchError>
                        value: Ok
                    - name: xcmPallet.Sent
                    - name: dmpQueue.ExecutedDownward
                      chain: *assets_parachain
                      attribute:
                        type: XcmV2TraitsOutcome
                        isComplete: true
                        value: 2,000,000,000
                    - name: polkadotXcm.Sent
                      chain: *assets_parachain
                    - name: ump.ExecutedUpward
                      remote: true
                      timeout: 40000
                      attribute:
                        type: XcmV2TraitsOutcome
                        isComplete: true
                        value: 1,000,000,000
                    - name: hrmp.OpenChannelAccepted
                      remote: true
                      timeout: 40000
              - queries:
                  open_channels:
                    chain: *relay_chain
                    pallet: hrmp
                    call: hrmpChannels
                    args: [
                      {
                        sender: *cp_2000_id,
                        recipient: *ap_id
                      }
                    ]
              # - asserts:
              #     equal:
              #       args: [
              #         $requested_channels,
              #         [
              #           {
              #             sender: 2000,
              #             recipient: 1000
              #           }
              #         ]
              #       ]
            
                                